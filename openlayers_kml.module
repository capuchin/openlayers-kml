<?php

/**
* Implementation of hook_theme().
*/
function openlayers_kml_theme() {
  return array(
    // Themes for the formatters.
    'openlayers_kml_formatter_kml_openlayers' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}
 
/**
* Implementation of hook_field_formatter_info().
*
* All fields should have a 'default' formatter.
* Any number of other formatters can be defined as well.
* It's nice for there always to be a 'plain' option
* for the raw value, but that is not required.
*
*/
function openlayers_kml_field_formatter_info() {
  return array(
    // The machine name of the formatter.
    'kml_openlayers' => array(
      // The human-readable label shown on the Display
      // fields screen.
      'label' => t('KML OpenLayers Map'),
      // An array of the field types this formatter
      // can be used on.
      'field types' => array('filefield'),
      // CONTENT_HANDLE_CORE:   CCK will pass the formatter
      // a single value.
      // CONTENT_HANDLE_MODULE: CCK will pass the formatter
      // an array of all the values. None of CCK's core
      // formatters use multiple values, that is an option
      // available to other modules that want it.
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}
 
 
/**
* Theme function for 'default' example field formatter.
*
* $element['#item']: the sanitized $delta value for the item,
* $element['#field_name']: the field name,
* $element['#type_name']: the $node->type,
* $element['#formatter']: the $formatter_name,
* $element'#node']: the $node,
* $element['#delta']: the delta of this item, like '0',
*
*/
function theme_openlayers_kml_formatter_kml_openlayers($element) {
  // In here, find the KML field, make your map array, and render
	global $base_url;
	$kml = $base_url . '/' . $element['#item']['filepath'];

  $map = openlayers_get_default_map();
  
  // Put together map
  $map['id'] = 'kml';
  // Make sure that our display projection matches the database projection
  $map['options']['displayProjection'] = ($field['srid'] != 0) ? $field['srid'] : '4326';

  // Define a vector layer for our features
	$map['layers']['kml_example'] = array(
		'id' => 'openlayers_kml_cck',
		'type' => 'KML',
		'name' => t('KML Overlay'),
		'url' => $kml,
		'options' => array(),
	);
  // Render Map
  $rendered_map = openlayers_render_map($map);

/*
  // Check errors
  if (!$rendered_map['errors']) {
    // Add JS
    drupal_add_js(drupal_get_path('module', 'openlayers_cck') .'/js/openlayers_cck.js');
    //Add CSS
    drupal_add_css(drupal_get_path('module', 'openlayers_cck') .'/openlayers_cck.css', 'module');

    // Put together array for JS
    $openlayers_cck = array(
      'openlayers_kml_cck' => array(
        'maps' => array(
          $map_id => array(
            'field_name' => $field_name,
            'field_data' => $field,
            'field_name_js' => $field_name_html,
            'field_container' => $field_container,
            'field_items' => $items,
            'field_id' => $field_id,
            'hidden_field_id' => $hidden_field_id,
            'map_container' => 'openlayers-cck-map-container-' . $map_id,
          ),
        ),
      ),
    );

    // Add JS settings
    drupal_add_js($openlayers_cck, 'setting');
  }
*/

	return $rendered_map['themed'];
}
