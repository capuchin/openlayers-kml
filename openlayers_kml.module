<?php

/**
 * Implementation of hook_openlayers_behaviors
 */
function openlayers_kml_openlayers_behaviors() {
  return array(
    'openlayers_kml_vector_layer' => array(
       'title' => t('Dynamic Vector Layer for KML'),
       'description' => t('Adds a dynamic layer from a features array'),
       'type' => 'layer',
       'path' => drupal_get_path('module', 'openlayers_kml') 
         .'/includes/behaviors',
       'file' => 'openlayers_kml_vector_layer.inc',
       'ui_visibility' => FALSE,
       'behavior' => array(
         'class' => 'openlayers_kml_vector_layer',
         'parent' => 'openlayers_behavior',
       ),
    ),
   );
}

/**
 * Implementation of hook_theme().
 */
function openlayers_kml_theme() {
  $themes = array(
    'openlayers_kml_formatter_default' => array(
      'arguments' => array('element' => NULL),
      'function' => 'theme_openlayers_kml_formatter_map',
    ),
  );
  // Create formatter theme functions
  foreach (openlayers_preset_options() as $name => $title) {
    $themes['openlayers_kml_formatter_map_' . $name] = array(
      'arguments' => array('element' => NULL),
      'function' => 'theme_openlayers_kml_formatter_map',
    );
  }

  return $themes;
}
 
/**
* Implementation of hook_field_formatter_info().
*
* All fields should have a 'default' formatter.
* Any number of other formatters can be defined as well.
* It's nice for there always to be a 'plain' option
* for the raw value, but that is not required.
*
*/
function openlayers_kml_field_formatter_info() {

  $formatters = array();
  // Default formatter
  $formatters['default'] = array(
    'label' => t('Default Map'),
    'field types' => array('filefield'),
    'multiple values' => CONTENT_HANDLE_MULTIPLE,
  );
  // Map preset formatter
  foreach (openlayers_preset_options() as $name => $title) {
    $formatters['map_' . $name] = array(
      'label' => t('OpenLayers Map: @preset', 
        array('@preset' => check_plain($title))),
      'field types' => array('filefield'),
      'multiple values' => CONTENT_HANDLE_MULTIPLE,
    );
  }
  return $formatters;
}

// TODO this is not getting called when formatters other than 'default' are used
function theme_openlayers_kml_formatter_map($element) {

  // Get the url of the KML file
  global $base_url;
  $kml = $base_url . '/' . $element[0]['#item']['filepath']; // TODO handle multiple files

  // copied from theme_openlayers_cck_formatter_map
  $features = array();
  $field = content_fields($element['#field_name'], $element['#type_name']);
  $widget = $field['widget'];

  // Create array of $features
  foreach (element_children($element) as $delta) {
    $features[] = array(
      'kml' => $kml,
      'projection' => '4326',
    );
  }

  if (drupal_substr($element['#formatter'], 25) == 'openlayers_kml_formatter_') {
    $preset_name = drupal_substr($element['#formatter'], 25);
  }
  elseif (drupal_substr($element['#formatter'], 0, 15) == 'openlayers_map_') {
    $preset_name = drupal_substr($element['#formatter'], 15);
  }
  else {
    $preset_name = variable_get('openlayers_default_preset', 'default');
  }

  // Get map preset
  $preset = openlayers_preset_load($preset_name);

  // Add vector layer behavior
  $preset->data['behaviors']['openlayers_kml_vector_layer'] =
    array('features' => $features);

  // Add widget/formatter behaviors
  if (isset($widget['openlayers_behaviors']) && is_array($widget['openlayers_behaviors'])) {
    foreach ($widget['openlayers_behaviors'] as $key => $behavior) {
      if ($behavior['enabled']) {
        $preset->data['behaviors'][$key] = $behavior['options'];
      }
    }
  }

  // Render map
  return openlayers_render_map($preset->data, $preset->name);
}

